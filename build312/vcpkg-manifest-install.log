Detecting compiler hash for triplet x64-windows...
Compiler found: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.44.35207/bin/Hostx64/x64/cl.exe
The following packages are already installed:
    assimp:x64-windows@6.0.2#1
    bullet3:x64-windows@3.25#3
  * bzip2[core,tool]:x64-windows@1.0.8#6
    cgltf:x64-windows@1.14
  * draco:x64-windows@1.5.7
  * egl-registry:x64-windows@2024-01-25
    entt:x64-windows@3.15.0
  * expat:x64-windows@2.7.1
  * fmt:x64-windows@11.2.0
    gainput:x64-windows@1.0.0#6
    glad[core,loader]:x64-windows@0.1.36
    glfw3:x64-windows@3.4#1
    glm:x64-windows@1.0.1#3
  * jhasse-poly2tri:x64-windows@2023-12-27#2
    joltphysics:x64-windows@5.3.0
  * kubazip:x64-windows@0.3.5
  * libffi:x64-windows@3.5.2
  * liblzma:x64-windows@5.8.1
  * minizip:x64-windows@1.3.1#1
    nlohmann-json:x64-windows@3.12.0#1
    openal-soft:x64-windows@1.24.3#1
  * opengl-registry:x64-windows@2024-02-10#1
  * openssl:x64-windows@3.5.2
  * pkgconf:x64-windows@2.5.1#1
  * polyclipping:x64-windows@6.4.2#13
  * pugixml:x64-windows@1.15
    pybind11:x64-windows@3.0.1
  * python3[core,extensions]:x64-windows@3.12.9#3
  * rapidjson:x64-windows@2025-02-26
  * sqlite3[core,json1]:x64-windows@3.50.4
    stb:x64-windows@2024-07-29#1
  * utfcpp:x64-windows@4.0.6
  * vcpkg-cmake:x64-windows@2024-04-23
  * vcpkg-cmake-config:x64-windows@2024-05-23
  * vcpkg-cmake-get-vars:x64-windows@2025-05-29
  * vcpkg-get-python:x64-windows@2025-02-09
  * vcpkg-make:x64-windows@2025-08-21
  * vcpkg-msbuild:x64-windows@2023-08-08
  * vcpkg-pkgconfig-get-modules:x64-windows@2024-04-03
  * vcpkg-tool-meson:x64-windows@1.9.0
    vulkan-headers:x64-windows@1.4.309.0
  * zlib:x64-windows@1.3.1
The package stb provides CMake targets:

    find_package(Stb REQUIRED)
    target_include_directories(main PRIVATE ${Stb_INCLUDE_DIR})
assimp provides CMake targets:

  # this is heuristically generated, and may not be correct
  find_package(assimp CONFIG REQUIRED)
  target_link_libraries(main PRIVATE assimp::assimp)

assimp provides pkg-config modules:

  # Import various well-known 3D model formats in an uniform manner.
  assimp

bullet3 provides CMake targets:

  find_package(Bullet CONFIG REQUIRED)
  # specific set: BulletSoftBody, BulletDynamics, BulletInverseDynamics,
  #               BulletCollision, Bullet3Common, LinearMath
  target_link_libraries(main PRIVATE ${BULLET_LIBRARIES})
  # individual imported targets, e.g. for Bullet 3 libs
  target_link_libraries(main PRIVATE Bullet3Dynamics)

bullet3 provides pkg-config modules:

  # specific set: BulletSoftBody, BulletDynamics, BulletCollision, LinearMath
  bullet

cgltf is header-only and can be used from CMake via:

  find_path(CGLTF_INCLUDE_DIRS "cgltf.h")
  target_include_directories(main PRIVATE ${CGLTF_INCLUDE_DIRS})

entt provides CMake targets:

    find_package(EnTT CONFIG REQUIRED)
    target_link_libraries(main PRIVATE EnTT::EnTT)

gainput provides CMake targets:

  # this is heuristically generated, and may not be correct
  find_package(unofficial-gainput CONFIG REQUIRED)
  target_link_libraries(main PRIVATE unofficial::gainput::gainput)

glad provides CMake targets:

  # this is heuristically generated, and may not be correct
  find_package(glad CONFIG REQUIRED)
  target_link_libraries(main PRIVATE glad::glad)

glfw3 provides CMake targets:

  # this is heuristically generated, and may not be correct
  find_package(glfw3 CONFIG REQUIRED)
  target_link_libraries(main PRIVATE glfw)

glfw3 provides pkg-config modules:

  # A multi-platform library for OpenGL, window and input
  glfw3

The package glm provides CMake targets:

    find_package(glm CONFIG REQUIRED)
    target_link_libraries(main PRIVATE glm::glm)

    # Or use the header-only version
    find_package(glm CONFIG REQUIRED)
    target_link_libraries(main PRIVATE glm::glm-header-only)

joltphysics provides CMake targets:

  # this is heuristically generated, and may not be correct
  find_package(Jolt CONFIG REQUIRED)
  target_link_libraries(main PRIVATE Jolt::Jolt)

The package nlohmann-json provides CMake targets:

    find_package(nlohmann_json CONFIG REQUIRED)
    target_link_libraries(main PRIVATE nlohmann_json::nlohmann_json)

The package nlohmann-json can be configured to not provide implicit conversions via a custom triplet file:

    set(nlohmann-json_IMPLICIT_CONVERSIONS OFF)

For more information, see the docs here:
    
    https://json.nlohmann.me/api/macros/json_use_implicit_conversions/

openal-soft provides CMake targets:

  # this is heuristically generated, and may not be correct
  find_package(OpenAL CONFIG REQUIRED)
  target_link_libraries(main PRIVATE OpenAL::OpenAL)

openal-soft provides pkg-config modules:

  # OpenAL is a cross-platform 3D audio API
  openal

pybind11 provides CMake integration:

  # Easy
  set(PYBIND11_FINDPYTHON ON)
  find_package(pybind11 CONFIG REQUIRED)
  pybind11_add_module(MyModule1 src1.cpp)

  # Advanced
  find_package(Python COMPONENTS Interpreter Development)
  find_package(pybind11 CONFIG REQUIRED)
  Python_add_library(MyModule2 src2.cpp)
  target_link_libraries(MyModule2 PRIVATE pybind11::headers)

Vulkan-Headers provides official find_package support:

    find_package(VulkanHeaders CONFIG)
    target_link_libraries(main PRIVATE Vulkan::Headers)

All requested installations completed successfully in: 1.84 ms
